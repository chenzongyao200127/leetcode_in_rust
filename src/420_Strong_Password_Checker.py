

# ^(?!.*(\w)\1{2,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])\w{6,20}$
# 这个正则表达式使用了正则表达式的多种特性，包括：

# ^ 和 $：分别表示匹配字符串的开始和结尾，确保整个字符串都符合要求。
# (?!.*(\w)\1{2,})：使用负向前瞻（negative lookahead）来防止匹配连续三个重复字符，其中 (\w) 匹配任意字符，\1{2,} 匹配两个或以上相同字符，.* 匹配任意数量的任意字符。
# (?=.*\d)、(?=.*[a-z])、(?=.*[A-Z])：使用正向前瞻（positive lookahead）来匹配至少一个数字、至少一个小写字母和至少一个大写字母。
# \w{6,20}：匹配任意字母、数字或下划线，长度在 6 到 20 个字符之间。
# 使用该正则表达式可以很方便地验证一个字符串是否为强密码，例如：

# import re
# password = "Abcdef1234"
# if re.match("^(?!.*(\w)\1{2,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])\w{6,20}$", password):
#     print("该密码是强密码")
# else:
#     print("该密码不是强密码")

import re

class Solution:
    def strongPasswordChecker(self, password: str) -> int:
        if re.match("^(?!.*(\w)\1{2,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])\w{6,20}$", password):
            return 0
        else:
            
        