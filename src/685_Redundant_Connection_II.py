# 685_Redundant_Connection_II
# https://leetcode.cn/problems/redundant-connection-ii/

# 在本问题中，有根树指满足以下条件的 有向 图。该树只有一个根节点，所有其他节点都是该根节点的后继。
# 该树除了根节点之外的每一个节点都有且只有一个父节点，而根节点没有父节点。

# 输入一个有向图，该图由一个有着 n 个节点（节点值不重复，从 1 到 n）的树及一条附加的有向边构成。
# 附加的边包含在 1 到 n 中的两个不同顶点间，这条附加的边不属于树中已存在的边。

# 结果图是一个以边组成的二维数组 edges 。 每个元素是一对 [ui, vi]，用以表示 有向 图中连接顶点 ui 和顶点 vi 的边，其中 ui 是 vi 的一个父节点。

# 返回一条能删除的边，使得剩下的图是有 n 个节点的有根树。若有多个答案，返回最后出现在给定二维数组的答案。


# 我们首先初始化并查集，然后遍历每条边，对于每条边，我们判断这条边的终点是否已经有父节点，如果有，那么这条边就是多余的；
# 否则，我们判断这条边的起点和终点是否在同一个集合中，如果在，那么这条边也是多余的。
# 否则，我们就将这条边的终点加入到起点的集合中。

# 请注意，在初始化并查集时，我们将每个节点的父节点初始化为自己，而在遍历边时，我们将每个节点的父节点更新为这条边的起点。
# 这是因为在这个问题中，我们知道每个节点除了根节点外都有且只有一个父节点，所以我们可以直接将每个节点的父节点设置为这条边的起点。

